package cmd

import (
	"github.com/gocomply/metaschema/metaschema"
	"github.com/urfave/cli"
	"os"
)

// Execute ...
func Execute() error {
	app := cli.NewApp()
	app.Name = "NIST Metaschema"
	app.Usage = "This project extends metaschema beyond xml/json/yaml. This project allows users to generate golang code for processing those xml/json/yaml files out of NIST's metaschema."
	app.Commands = []cli.Command{
		generate,
	}

	return app.Run(os.Args)
}

var generate = cli.Command{
	Name:      "generate",
	Usage:     "Generate golang code to parse json/yaml/xml files generated by given metaschema",
	ArgsUsage: "METASCHEMA-DIR GO-MODULE-IMPORT OUTPUT-DIR",
	Before: func(c *cli.Context) error {
		if c.NArg() != 3 {
			return cli.NewExitError("Exactly 3 arguments are required", 1)
		}
		return nil
	},
	Action: func(c *cli.Context) error {
		metaschemaDir, goModule, outputDir := c.Args()[0], c.Args()[1], c.Args()[2]
		err := metaschema.Generate(metaschemaDir, goModule, outputDir)
		if err != nil {
			return cli.NewExitError(err, 1)
		}
		return nil
	},
}
